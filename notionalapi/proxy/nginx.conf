
#user http;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  4096;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    # config to log slow requests only
    log_format  main escape=none  '$request_time "$time_local" $remote_addr "$http_user_agent" $host" $request_uri $request_body';
    map $request_uri $loggable_request
    {
        ~*\/websocket 0;
        default 1;
    }
    map $request_time $loggable
    {
        ~^[0-9]\. 0;
        default $loggable_request;
    }
    access_log  /var/log/nginx/access.log  main if=$loggable;

    sendfile        on;
    #tcp_nopush     on;
    #keepalive_timeout  0;
    keepalive_timeout  100;
    #gzip  on;

    # fix timeout
    proxy_connect_timeout       300;
    proxy_send_timeout          300;
    proxy_read_timeout          300;
    send_timeout                300;

    grpc_send_timeout           300;
    grpc_read_timeout           300;

    # fix: could not build optimal types_hash, you should increase either types_hash_max_size: 1024 or types_hash_bucket_size: 64; ignoring types_hash_bucket_size
    types_hash_max_size 4096;
    server_names_hash_bucket_size 512;

    # fix could not build optimal variables_hash, you should increase either variables_hash_max_size: 1024 or variables_hash_bucket_size: 64; ignoring variables_hash_bucket_size
    variables_hash_max_size 4096;

    # fix 413 Payload Too Large
    client_max_body_size 10m;

    resolver 127.0.0.11  valid=30s;   # Docker's DNS server

    include upstream.conf;

    ssl_certificate      fullchain.pem;
    ssl_certificate_key  privkey.pem;
#        ssl_prefer_server_ciphers  on;
    ssl_session_cache shared:le_nginx_SSL:40m;
    ssl_session_timeout 1440m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
#        grpc_ssl_certificate cert.pem;
#        grpc_ssl_certificate_key cert.key;
#        grpc_ssl_server_name off;

    # rate-limiting
    limit_req_zone $binary_remote_addr zone=ip:20m rate=60000r/m;
    limit_req zone=ip burst=70000 nodelay;
    limit_req_status 429;
    limit_conn_status 429;

    # default servers
    server {
        listen 80;
        listen 443 ssl;
        server_name default.gw.notionalapi.net;
        return 444;
    }

    server {
        listen 80;
        listen 443 ssl;
        server_name notionalapi.net;

        location ~* ^/(.*) {
            set $target_web tasks.napiweb;
            proxy_pass http://$target_web:3000/$1$is_args$args;
        }
    }

    # RPC-xapikey
    server {
        listen 80;
        listen 443 ssl;
        http2 on;
        server_name ~^r-(?<chain_name>.+)--(?<xapikey>.+)\.gw\.notionalapi\.net$;

        proxy_hide_header 'Access-Control-Allow-Origin';
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
        add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';

        location ~* ^/(.*) {
            location ~* ^/genesis(.*) {
                deny all;
            }

            location ~* ^/websocket {
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $http_host;
                proxy_set_header X-NginX-Proxy true;
                proxy_set_header x-api-key ${xapikey};

                proxy_pass http://backend_wsrpc_${chain_name};
            }

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
                add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';

                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            proxy_set_header x-api-key ${xapikey};

            proxy_pass http://backend_rpc_${chain_name}/$1$is_args$args;
        }
    }

    # REST/API-xapikey
    server {
        listen 80;
        listen 443 ssl;
        http2 on;
        server_name ~^a-(?<chain_name>.+)--(?<xapikey>.+)\.gw\.notionalapi\.net$;

        proxy_hide_header 'Access-Control-Allow-Origin';
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
        add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';

        location ~* ^/(.*) {
#             location ~* /validators/(.*)/delegations(.*) {
#                 deny all;
#             }

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
                add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';

                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            proxy_set_header x-api-key ${xapikey};

            proxy_pass http://backend_api_${chain_name}/$1$is_args$args;
        }
    }

    # gRPC-xapikey
    server {
        listen 9090;
        listen 443 ssl;
        http2 on;
        server_name ~^g-(?<chain_name>.+)--(?<xapikey>.+)\.gw\.notionalapi\.net$;

        location / {
            grpc_set_header x-api-key ${xapikey};

            grpc_pass grpc://backend_grpc_${chain_name};
        }
    }

    # JSON-RPC-xapikey
    server {
        listen 80;
        listen 443 ssl;
        http2 on;
        server_name ~^j-(?<chain_name>.+)--(?<xapikey>.+)\.gw\.notionalapi\.net$;

        proxy_hide_header 'Access-Control-Allow-Origin';
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
        add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';
        proxy_set_header x-api-key ${xapikey};

        # WS-JSON-RPC
        location ~* ^/websocket/(.*) {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
                add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';

                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            proxy_set_header x-api-key ${xapikey};

            # fix Disconnected code 1006
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            keepalive_timeout  86400;

            proxy_pass http://backend_wsjsonrpc_${chain_name}/$1$is_args$args;
        }

        location ~* ^/(.*) {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
                add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';

                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            proxy_pass http://backend_jsonrpc_${chain_name}/$1$is_args$args;
        }
    }
}
