
#user http;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  4096;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    access_log off;

    sendfile        on;
    #tcp_nopush     on;
    #keepalive_timeout  0;
    keepalive_timeout  100;
    #gzip  on;

    # fix: could not build optimal types_hash, you should increase either types_hash_max_size: 1024 or types_hash_bucket_size: 64; ignoring types_hash_bucket_size
    types_hash_max_size 4096;
    server_names_hash_bucket_size 512;

    # fix could not build optimal variables_hash, you should increase either variables_hash_max_size: 1024 or variables_hash_bucket_size: 64; ignoring variables_hash_bucket_size
    variables_hash_max_size 4096;

    resolver 127.0.0.11  valid=30s;   # Docker's DNS server

#     include upstream.conf;

    ssl_certificate      fullchain.pem;
    ssl_certificate_key  privkey.pem;
#        ssl_prefer_server_ciphers  on;
    ssl_session_cache shared:le_nginx_SSL:40m;
    ssl_session_timeout 1440m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
#        grpc_ssl_certificate cert.pem;
#        grpc_ssl_certificate_key cert.key;
#        grpc_ssl_server_name off;

    server {
        listen       80;
        server_name  localhost;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        location = /basic_status {
            stub_status;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }

    server {
        listen 443 ssl;
        server_name snapshot.$USE_DOMAIN_NAME;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        include redirect_snapshots.conf;
    }

    server {
        listen 443 ssl;
        server_name admin.$USE_DOMAIN_NAME;

        location ~* ^/(.*) {
            set $target_monitor tasks.admin;
            proxy_pass http://$target_monitor:7749/$1$is_args$args;
        }
    }

    server {
        listen 443 ssl;
        server_name grafana.$USE_DOMAIN_NAME;

        location ~* ^/(.*) {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;

            set $target_grafana tasks.grafana;
            proxy_pass http://$target_grafana:3000/$1$is_args$args;
        }
    }

    server {
        listen 443 ssl;
        server_name grafana-relayer.$USE_DOMAIN_NAME;

        location ~* ^/hermes_main/(?<hub_name>.+)/(.*) {
            set $target_hermes tasks.rl_${hub_name};
            proxy_pass http://$target_hermes:3001/$2$is_args$args;
        }

        location ~* ^/hermes_cron/(?<hub_name>.+)/(.*) {
            set $target_hermes_cron tasks.rlclear_${hub_name};
            proxy_pass http://$target_hermes_cron:8000/$2$is_args$args;
        }

        location ~* ^/(.*) {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;

            set $target_grafana_relayer tasks.grafana_relayer;
            proxy_pass http://$target_grafana_relayer:3000/$1$is_args$args;
        }
    }

    server {
        listen 443 ssl;
        server_name relayrefiller.$USE_DOMAIN_NAME;

        location ~* ^/(.*) {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;

            proxy_pass http://37.27.35.180:3000/$1$is_args$args;
        }
    }

    server {
        listen 443 ssl;
        server_name upgrade-watcher.$USE_DOMAIN_NAME;

        location ~* ^/(.*) {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;

            proxy_pass http://tasks.upgrade_watcher:3000/$1$is_args$args;
        }
    }
}
